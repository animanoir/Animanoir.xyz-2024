---
import Footer from "@/components/Footer/Footer.astro";
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import { SITE_TITLE } from "../../consts";
import { getCollection } from "astro:content";

const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={"Blog & studies"} />
  </head>
  <body>
    <Header />
    <main>
      <div class="blogpostsContainer">
        <ul>
          <li class="random-position">
            <a href="/books">
              <div class="postTitle">ðŸ“š Books I'm currently reading!</div>
            </a>
          </li>
          <li class="random-position">
            <a
              href="https://ensamblaje-maquinico-dela-sensualidad.netlify.app/"
            >
              <div class="postTitle">ðŸŽ‡ Visit my Knowledge graph!</div>
            </a>
          </li>

          {
            posts.map((post) => (
              <li class="random-position">
                <small class="postDate">
                  {new Date(post.data.pubDate).toLocaleDateString()}
                </small>
                <a data-astro-prefetch href={`/blog/${post.slug}/`}>
                  <div class="postInfo">
                    <p class="postTitle">{post.data.title}</p>
                  </div>
                </a>
              </li>
            ))
          }
        </ul>
      </div>
    </main>
    <style>
      .blogpostsContainer {
        padding-top: 5rem;
        position: relative;
        padding-bottom: 50vh;
      }

      ul {
        list-style-type: none;
        padding: 0;
        position: relative;
        width: 100%;
        height: 100%;
      }

      ul li {
        position: absolute;
        display: block;
        max-width: 400px; /* Prevent posts from being too wide */
      }

      ul li.random-position {
        /* Positions will be set by JavaScript */
      }

      .postDate {
        font-family: "Open Sans", sans-serif;
        font-size: 0.8rem;
        margin: 0;
        color: #484848;
      }
      ul {
        list-style-type: none;
        padding: 0;
      }

      ul a {
        text-decoration: none;
      }

      ul a:hover {
        filter: invert(1);
      }

      ul li {
        height: 100%;
        display: block;
        margin-bottom: 1rem;
      }

      .postTitle {
        background-color: black;
        color: floralwhite;
        font-family: "Montserrat", sans-serif;
        font-size: 1rem;
        padding-left: 0;
        padding-top: 0;
        padding-bottom: 0;
        margin-bottom: 0 !important;
        line-height: 1.5;
        width: fit-content;
      }

      ul li a {
        position: relative;
      }
      .postInfo {
        mix-blend-mode: exclusion;
        text-align: center;
      }

      .tools {
        margin-top: 1rem;
        color: #fdfefe;
        font-family: "Open Sans", sans-serif;
        margin: 0;
        font-size: 1em;
      }

      /* Standard Desktops / Large Laptops */
      @media (max-width: 1920px) {
        .blogpostsContainer {
          margin: 0 2rem;
        }
      }

      /* Laptops / Large Tablets */
      @media (max-width: 1440px) {
        .blogpostsContainer {
          margin: 0 2rem;
        }
      }

      /* Tablets / Small Laptops */
      @media (max-width: 1024px) {
        .blogpostsContainer {
          margin: 0 1rem;
        }
      }

      /* Mobile Devices */
      @media (max-width: 768px) {
        .blogpostsContainer {
          margin: 0 2rem;
          padding-bottom: 2rem;
          padding-top: 8rem;
        }

        .postTitle {
          font-size: 1.2rem;
        }

        ul {
          display: flex;
          flex-direction: column;
          gap: 1.5rem; /* Add consistent spacing between items */
        }

        ul li {
          position: static !important; /* Override absolute positioning */
          max-width: none; /* Allow full width */
          width: 100%;
          opacity: 1 !important; /* Ensure visibility */
          left: auto !important; /* Reset positioning */
          top: auto !important; /* Reset positioning */
          margin-bottom: 0; /* Remove margin since we're using gap */
        }

        ul li.random-position {
          position: static !important;
          transform: none !important;
        }

        .postInfo {
          text-align: left; /* Left align for better readability on mobile */
        }

        .postDate {
          display: block;
          margin-bottom: 0.5rem;
        }
      }
      /* Add initial opacity for smooth appearance */
      .random-position {
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
      }
    </style>
    <script>
      function throttle(func, limit) {
        let inThrottle;
        return function () {
          const args = arguments;
          const context = this;
          if (!inThrottle) {
            func.apply(context, args);
            inThrottle = true;
            setTimeout(() => (inThrottle = false), limit);
          }
        };
      }

      function randomizePositions() {
        // Skip randomization on mobile devices
        if (window.innerWidth <= 768) {
          const posts = document.querySelectorAll(".random-position");
          posts.forEach((post) => {
            // Reset to normal positioning for mobile
            (post as HTMLElement).style.position = "static";
            (post as HTMLElement).style.left = "auto";
            (post as HTMLElement).style.top = "auto";
            (post as HTMLElement).style.opacity = "1";
          });
          return;
        }

        const posts = document.querySelectorAll(".random-position");
        let offset = 100;
        posts.forEach((post, index) => {
          // Reset opacity and position first
          (post as HTMLElement).style.opacity = "0";
          (post as HTMLElement).style.position = "absolute";
          (post as HTMLElement).style.left = "0px";
          (post as HTMLElement).style.top = "0px";

          // Add a small delay to create a staggered appearance effect
          setTimeout(() => {
            const postRect = post.getBoundingClientRect();

            // Calculate random positions within the container bounds
            const maxX = window.innerWidth - postRect.width;
            const maxY = window.innerHeight + offset - postRect.height;

            const randomX = Math.floor(Math.random() * Math.max(0, maxX));
            const randomY = Math.floor(Math.random() * Math.max(0, maxY));

            (post as HTMLElement).style.left = randomX + "px";
            (post as HTMLElement).style.top = randomY + "px";
            (post as HTMLElement).style.opacity = "1";
          }, index * 100); // Stagger by 100ms
        });
      }

      // Create throttled version of randomizePositions
      const throttledRandomizePositions = throttle(randomizePositions, 250);

      // Use throttled version for resize event
      addEventListener("resize", throttledRandomizePositions);

      // Run on initial load
      document.addEventListener("DOMContentLoaded", randomizePositions);

      // Run on Astro view transitions
      document.addEventListener("astro:page-load", randomizePositions);

      // Also run when navigating to this page
      document.addEventListener("astro:after-swap", randomizePositions);
    </script>
  </body>
</html>
