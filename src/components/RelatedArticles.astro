---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

interface Props {
  currentTags?: string[];
  currentUrl: string;
  currentSlug?: string;
  maxResults?: number;
}

const {
  currentTags = [],
  currentUrl,
  currentSlug,
  maxResults = 3,
} = Astro.props;

// Get all blog posts
const allPosts = await getCollection("blog");

// Extract slug from currentUrl if currentSlug is not provided
const slugToExclude = currentUrl.replace("/blog/", "").replace(/\/+$/, "");

console.log("Debug RelatedArticles:");
console.log("- currentSlug:", currentSlug);
console.log("- currentUrl:", currentUrl);
console.log("- slugToExclude:", slugToExclude);

// Filter out the current post and find related posts
const relatedPosts = allPosts
  .filter((post) => {
    // Exclude the current post by comparing slugs
    if (post.slug === slugToExclude) {
      console.log("- Excluding current post:", post.slug);
      return false;
    }

    // Only include posts that have tags
    if (!post.data.tags || post.data.tags.length === 0) return false;

    // Only proceed if currentTags exists and has items
    if (!currentTags || currentTags.length === 0) return false;

    // Check if there are any shared tags
    const sharedTags = post.data.tags.filter((tag) =>
      currentTags.includes(tag)
    );

    const hasSharedTags = sharedTags.length > 0;
    if (hasSharedTags) {
      console.log(
        "- Including related post:",
        post.slug,
        "shared tags:",
        sharedTags
      );
    }

    return hasSharedTags;
  })
  .map((post) => {
    // Calculate relevance score based on shared tags
    const sharedTags =
      post.data.tags?.filter((tag) => currentTags?.includes(tag)) || [];

    return {
      ...post,
      relevanceScore: sharedTags.length,
      sharedTags,
    };
  })
  .sort((a, b) => {
    // Sort by relevance score (most shared tags first)
    if (b.relevanceScore !== a.relevanceScore) {
      return b.relevanceScore - a.relevanceScore;
    }
    // If same relevance, sort by publication date (newest first)
    return (
      new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
    );
  })
  .slice(0, maxResults);

console.log(
  "- Final related posts:",
  relatedPosts.map((p) => p.slug)
);
---

{
  relatedPosts.length > 0 && (
    <section class="related-articles">
      <h3 class="related-title">Related Articles:</h3>
      <div class="related-grid">
        {relatedPosts.map((post) => (
          <article class="related-card">
            <a href={`/blog/${post.slug}/`} class="related-link">
              <div class="related-content">
                <h4 class="related-post-title">{post.data.title}</h4>
                {post.data.summary && (
                  <p class="related-summary">{post.data.summary}</p>
                )}
                <div class="related-meta">
                  <time class="related-date">
                    {new Date(post.data.pubDate).toLocaleDateString()}
                  </time>
                  <div class="shared-tags">
                    {post.sharedTags.map((tag) => (
                      <span class="shared-tag">{tag}</span>
                    ))}
                  </div>
                </div>
              </div>
            </a>
          </article>
        ))}
      </div>
    </section>
  )
}

<style>
  .related-articles {
    position: relative;
    /* margin: 3rem 0; */
    /* padding: 2rem; */
  }

  .related-title {
    font-family: "Space Grotesk", sans-serif;
    font-size: 1.5rem;
    color: #fdfefe7f;
    margin-bottom: 0.5rem !important;
  }

  .related-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
  }

  .related-card {
    transition: all 0.3s ease;
    overflow: hidden;
  }

  .related-card:hover {
    transform: translateX(2px);
  }

  .related-link {
    display: block;
    text-decoration: none;
    color: inherit;
    /* padding: 1.5rem; */
    height: 100%;
  }

  .related-content {
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .related-post-title {
    font-family: "Space Grotesk", sans-serif;
    font-size: 1.1rem;
    color: #fdfefe;
    margin: 0 0 0.5rem 0;
    line-height: 1.3;
    font-weight: 600;
  }

  .related-summary {
    font-family: "EB Garamond", serif;
    font-size: 0.9rem;
    color: #fdfefe7f;
    margin: 0 0 1rem 0;
    line-height: 1.4;
    flex-grow: 1;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .related-meta {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-top: auto;
  }

  .related-date {
    font-family: "Space Grotesk", sans-serif;
    font-size: 0.7rem;
    color: #999;
  }

  .shared-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .shared-tag {
    background: rgba(255, 255, 255, 0.1);
    color: #fdfefe;
    padding: 0.2rem 0.5rem;
    border-radius: 3px;
    font-size: 0.6rem;
    font-family: "Space Grotesk", sans-serif;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .related-articles {
      margin: 2rem 0;
      padding: 1.5rem;
    }

    .related-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .related-title {
      font-size: 1.3rem;
    }

    .related-post-title {
      font-size: 1rem;
    }

    .related-summary {
      font-size: 0.8rem;
    }

    .related-link {
      padding: 1rem;
    }
  }

  @media (max-width: 480px) {
    .related-articles {
      margin: 1.5rem 0;
      padding: 1rem;
    }

    .related-title {
      font-size: 1.2rem;
      margin-bottom: 1rem;
    }

    .related-post-title {
      font-size: 0.9rem;
    }

    .related-summary {
      font-size: 0.75rem;
      -webkit-line-clamp: 2;
    }

    .shared-tag {
      font-size: 0.55rem;
      padding: 0.15rem 0.4rem;
    }
  }
</style>
